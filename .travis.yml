sudo: required
dist: trusty

language: cpp

os:
  - linux

compiler:
  - gcc

git:
  depth: 3

env:
  - XPIKS_BINARY=binary
  - CORE_TESTS=tests QT_FATAL_WARNINGS=true
  - INTEGRATION_TESTS=tests QT_FATAL_WARNINGS=true
  - UI_TESTS=tests QT_FATAL_WARNINGS=true

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - lcov
      - gcc-5
      - g++-5
  sonarcloud:
    organization: "ribtoks-github"
    branches:
      - master
      - sonar_cube
    
cache:
  directories:
    - '$HOME/.sonar/cache'
      
cache:
  apt: true  
  directories:
    - vendors

before_install:
  - sudo add-apt-repository ppa:beineri/opt-qt562-trusty -y
  - sudo add-apt-repository ppa:kubuntu-ppa/backports -y
  - sudo add-apt-repository ppa:jonathonf/ffmpeg-3 -y
  - sudo apt-get update -qq

install:
  - sudo apt-get install -qq qt56base; source /opt/qt56/bin/qt56-env.sh
  - sudo apt-get install qt56base qt56quickcontrols qt56svg qt56declarative qt56graphicaleffects libcurl4-openssl-dev hunspell-en-us zlib1g-dev libimage-exiftool-perl
  - sudo apt-get install libavcodec-dev libavdevice-dev libavformat-dev libavfilter-dev libavutil-dev libswscale-dev libdb-dev
  - sudo apt-get install -y gdb
  - sudo apt-get install -y libexiv2-dev expat
  - sudo apt-get install -qq cppcheck
  - sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-5 /usr/bin/g++
  - sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-5 90
  - if [ "$CXX" = "g++" ]; then export CXX="g++-5" CC="gcc-5"; fi

before_script:
  - export COMPILER=g++-5
  - g++ --version
  - ulimit -c unlimited -S       # enable core dumps
  - if [ -n "$UI_TESTS" ]; then export DISPLAY=:99.0; fi
  - if [ -n "$UI_TESTS" ]; then sh -e /etc/init.d/xvfb start; fi
  - if [ -n "$UI_TESTS" ]; then sleep 3; fi # give xvfb some time to start
  - chmod +x vendors/build_vendors_travis.sh
  - chmod +x src/xpiks-tests/get_code_cov.sh

script:
  - if [ -z "${UI_TESTS+xxx}" ]; then bash vendors/build_vendors_travis.sh; fi
  - cd src/
  - ls -la ../libs/
  - echo "-------"
  - if [ -n "$XPIKS_BINARY" ]; then cd xpiks-qt/; fi
  - if [ -n "$XPIKS_BINARY" ]; then qmake "CONFIG+= debug travis-ci" xpiks-qt.pro; fi
  - echo "-------"
  - if [ -n "$CORE_TESTS" ]; then cd xpiks-tests/xpiks-tests-core; fi
  - if [ -n "$CORE_TESTS" ]; then qmake "CONFIG+=debug travis-ci" xpiks-tests-core.pro; fi
  - echo "-------"
  - if [ -n "$INTEGRATION_TESTS" ]; then cd xpiks-tests/xpiks-tests-integration; fi
  - if [ -n "$INTEGRATION_TESTS" ]; then qmake "CONFIG+=debug travis-ci" xpiks-tests-integration.pro; fi
  - echo "-------"
  - if [ -n "$UI_TESTS" ]; then cd xpiks-tests/ui-tests-stubs; fi
  - if [ -n "$UI_TESTS" ]; then qmake "CONFIG+=debug travis-ci" ui-tests-stubs.pro; fi
  - if [ -n "$UI_TESTS" ]; then make; fi
  - if [ -n "$UI_TESTS" ]; then cd ../xpiks-tests-ui; fi
  - if [ -n "$UI_TESTS" ]; then qmake "CONFIG+=debug travis-ci" xpiks-tests-ui.pro; fi
  - echo "-------"
  - make
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../../../libs/
  - if [ -n "$XPIKS_BINARY" ]; then cppcheck --language=c++ --inconclusive --quiet -DQT_DEBUG -DWITH_LOGS -DWITH_PLUGINS -DWITH_STDOUT_LOGS -DTRAVIS_CI -UCORE_TESTS -UINTEGRATION_TESTS -UQ_OS_WIN -DQ_OS_LINUX --error-exitcode=1 --suppress=missingIncludeSystem --suppress='*:moc_*.cpp' --max-configs=15 --enable=warning . ; fi
  - if [ -n "$XPIKS_BINARY" ]; then sonar-scanner; fi
  - if [ -n "$CORE_TESTS" ]; then ./xpiks-tests-core; fi
  - if [ -n "$INTEGRATION_TESTS" ]; then ./xpiks-tests-integration; fi
  - if [ -n "$UI_TESTS" ]; then ./xpiks-tests-ui; fi

after_success:
  - if [ -z "${XPIKS_BINARY+xxx}" ]; then ../get_code_cov.sh "$PWD"; fi
  - if [ -z "${XPIKS_BINARY+xxx}" ]; then bash <(curl -s https://codecov.io/bash); fi

after_failure:
  - if [ -n "$CORE_TESTS" ]; then for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/xpiks-tests-core core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done; fi
  - if [ -n "$INTEGRATION_TESTS" ]; then for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/xpiks-tests-integration core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done; fi
  - if [ -n "$UI_TESTS" ]; then for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/xpiks-tests-ui core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done; fi
